{"version":3,"sources":["shared/index.js","Film/index.js","Dashboard/index.js","App/index.js","serviceWorker.js","index.js"],"names":["API","Films","film","onClick","React","useState","form","setForm","vote","setVote","comment","setComment","handleToggleBack","e","handleToggle","handleChangeVote","target","value","handleChangeComment","className","filmDataArray","Object","entries","type","onChange","map","renderForm","title","release_date","poster_path","src","alt","original_title","Dashboard","films","setFilms","isLoading","setLoading","useEffect","fetch","then","response","json","results","catch","error","console","finally","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gSAEaA,EAAG,4DAFA,mCAEA,a,MCoEDC,MAlEf,YAAmC,IAAlBC,EAAiB,EAAjBA,KAAiB,KAAXC,QACGC,IAAMC,UAAS,IADP,mBACzBC,EADyB,KACnBC,EADmB,OAERH,IAAMC,SAAS,GAFP,mBAEzBG,EAFyB,KAEnBC,EAFmB,OAGFL,IAAMC,SAAS,IAHb,mBAGzBK,EAHyB,KAGhBC,EAHgB,KAK1BC,EAAmB,SAACC,GACxBN,GAAQ,IAGJO,EAAe,SAACD,GACpBN,GAASD,IAGLS,EAAmB,SAACF,GACxBJ,EAAQI,EAAEG,OAAOC,QAGbC,EAAsB,SAACL,GAC3BF,EAAWE,EAAEG,OAAOC,QAyCtB,OACE,yBAAKE,UAAU,QACXb,EAvBa,WACjB,IAAMc,EAAgBC,OAAOC,QAAQpB,GAErC,OACE,yBAAKiB,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQhB,QAASS,GAAjB,UACA,2BAAOK,MAAOT,EAAMe,KAAK,SAASC,SAAUT,IAC5C,2BAAOE,MAAOP,EAASa,KAAK,OAAOC,SAAUN,KAE/C,yBAAKC,UAAU,cACb,2CAAaX,IACb,8CAAgBE,IACfU,EAAcK,KAAI,SAACvB,GAAD,OACjB,qCAAOA,EAAK,GAAZ,aAAmBA,EAAK,UASNwB,GAtCxB,yBAAKP,UAAU,SAAShB,QAASW,GAC/B,4BAAKZ,EAAKyB,OACV,4BAAKzB,EAAK0B,cACT1B,EAAK2B,YACJ,yBACEC,IAAG,yCAAoC5B,EAAK2B,aAC5CE,IAAK7B,EAAK8B,iBAGZ9B,EAAK8B,kB,MCNAC,MAvBf,WAAsB,IAAD,EACO7B,IAAMC,SAAS,IADtB,mBACZ6B,EADY,KACLC,EADK,OAEa/B,IAAMC,UAAS,GAF5B,mBAEZ+B,EAFY,KAEDC,EAFC,KAanB,OATAjC,IAAMkC,WAAU,WACdD,GAAW,GACXE,MAAMvC,GACHwC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUP,EAASO,EAAKC,YAC7BC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,MAC/BE,SAAQ,kBAAMV,GAAW,QAC3B,IAGD,yBAAKlB,UAAU,aACb,yCACCiB,EACG,aACAF,EAAMT,KAAI,SAACvB,GAAD,OAAU,kBAAC,EAAD,eAAM8C,IAAK9C,EAAK8B,gBAAoB,CAAE9B,eCXrD+C,MATf,WACE,OACE,yBAAK9B,UAAU,OACf,6CACE,kBAAC,EAAD,QCGc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoB,c","file":"static/js/main.63d8af10.chunk.js","sourcesContent":["const API_KEY = \"8f781d70654b5a6f2fa69770d1d115a3\";\n\nexport const API = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=''`;\n","import React from \"react\";\n\nimport \"./Film.css\";\n\nfunction Films({ film, onClick }) {\n  const [form, setForm] = React.useState(false);\n  const [vote, setVote] = React.useState(0);\n  const [comment, setComment] = React.useState(\"\");\n\n  const handleToggleBack = (e) => {\n    setForm(false);\n  };\n\n  const handleToggle = (e) => {\n    setForm(!form);\n  };\n\n  const handleChangeVote = (e) => {\n    setVote(e.target.value);\n  };\n\n  const handleChangeComment = (e) => {\n    setComment(e.target.value);\n  };\n\n  const renderFilm = () => {\n    return (\n      <div className=\"Poster\" onClick={handleToggle}>\n        <h2>{film.title}</h2>\n        <h3>{film.release_date}</h3>\n        {film.poster_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\n            alt={film.original_title}\n          />\n        ) : (\n          film.original_title\n        )}\n      </div>\n    );\n  };\n\n  const renderForm = () => {\n    const filmDataArray = Object.entries(film);\n\n    return (\n      <div className=\"Info\">\n        <div className=\"Info--form\">\n          <button onClick={handleToggleBack}>Return</button>\n          <input value={vote} type=\"number\" onChange={handleChangeVote} />\n          <input value={comment} type=\"text\" onChange={handleChangeComment} />\n        </div>\n        <div className=\"Info--data\">\n          <p>{`VOTE: ${vote}`}</p>\n          <p>{`COMMENT: ${comment}`}</p>\n          {filmDataArray.map((film) => (\n            <p>{`${film[0]}: ${film[1]}`}</p>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Film\">\n      {!form ? renderFilm() : renderForm()}\n    </div>\n  );\n}\n\nexport default Films;\n","import React from \"react\";\n\nimport { API } from \"../shared\";\nimport Film from \"../Film\";\n\nimport \"./Dashboard.css\";\n\nfunction Dashboard() {\n  const [films, setFilms] = React.useState([]);\n  const [isLoading, setLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    setLoading(true);\n    fetch(API)\n      .then((response) => response.json())\n      .then((json) => setFilms(json.results))\n      .catch((error) => console.error(error))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <div className=\"Dashboard\">\n      <h2>Film List</h2>\n      {isLoading\n        ? \"loading...\"\n        : films.map((film) => <Film key={film.original_title} {...{ film }} />)}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Dashboard from \"../Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1>IP Global APP</h1>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}